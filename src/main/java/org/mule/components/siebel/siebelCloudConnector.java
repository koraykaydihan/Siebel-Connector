/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.components.siebel;

import org.mule.components.siebel.api.opportunity.siebelAccountClient;
import org.mule.components.siebel.api.opportunity.siebelOpportunityClient;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import com.siebel.data.SiebelBusComp;
import com.siebel.data.SiebelBusObject;
import com.siebel.data.SiebelDataBean;
import com.siebel.data.SiebelException;

@Connector(namespacePrefix="siebel", namespaceUri = "http://www.mulesoft.org/schema/mule/siebel")
public class siebelCloudConnector {
	
    @Property
    private String username;
    @Property
    private String password;
    @Property
    private String connectString;
    @Property
    private String language;
    
	private SiebelDataBean client = null;
	private SiebelBusObject clientBusObject = null;
	private SiebelBusComp clientBusComp = null;
	private SiebelBusComp clientPickListBusComp = null;
	private SiebelBusComp clientAssocBusComp = null;

	private String MVGBusComp;
	
    
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getConnectString() {
        return connectString;
    }
    
    public void setConnectString(String connectString) {
        this.connectString = connectString;
    }
    
    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }
    
    // log in to Siebel server
    public SiebelDataBean login() throws SiebelException {
		
    	client = new SiebelDataBean();
		client.login(connectString, username, password, language);
		return client;
    }
    
    // log off from Siebel server
    public void logoff(SiebelDataBean client) throws SiebelException {
    	
    	clientBusObject.release();
    	clientBusComp.release();
		client.logoff();
		client = null;
    }
    
    // save record
    public void saveRecord() throws SiebelException {
    	
    	clientBusComp.writeRecord();
    }
    
    public void setMVGBusComp(String MVGBusComp) {
		
    	this.MVGBusComp = MVGBusComp;
    }
    
    // create Siebel record
    public SiebelDataBean performCreateOperation(SiebelDataBean client, 
    		                                     String siebelObject, 
    		                                     String siebelField, 
    		                                     String siebelFieldValue,
    		                                     String searchSpec) throws SiebelException {

    	clientBusObject = client.getBusObject(siebelObject);
    	clientBusComp = clientBusObject.getBusComp(siebelObject);
    	
    	clientBusComp.setViewMode(3);
    	clientBusComp.clearToQuery();
    	clientBusComp.activateField(siebelField);
    	clientBusComp.setSearchExpr(searchSpec);
    	clientBusComp.executeQuery2(true,true);
    	
    	if (clientBusComp.firstRecord()) {
    		// implement "there is already an existing record!" error
    	} else {
        	clientBusComp.newRecord(true);
        	clientBusComp.setFieldValue(siebelField, siebelFieldValue);
    	}
    	
    	return client;
    }
    
    // delete Siebel record
    public void performDeleteOperation(SiebelDataBean client, 
    		                           String siebelObject, 
    		                           String siebelField, 
    		                           String searchSpec) throws SiebelException {
		
    	clientBusObject = client.getBusObject(siebelObject);
    	clientBusComp = clientBusObject.getBusComp(siebelObject);
    	
    	clientBusComp.setViewMode(3);
    	clientBusComp.clearToQuery();
    	clientBusComp.activateField(siebelField);
    	clientBusComp.setSearchExpr(searchSpec);
    	clientBusComp.executeQuery2(true,true);
    	
    	if (clientBusComp.firstRecord() && !clientBusComp.nextRecord()) {
    		clientBusComp.deleteRecord();
    	}
    	else {
    		// implement "no record or more than one record returned!" error    		
    	}
    }
    
    // update Siebel record
    public SiebelDataBean performUpdateOperation(SiebelDataBean client, 
    		                                     String siebelObject_parent, 
    		                                     String siebelField_parent, 
    		                                     String searchSpec_parent,
    		                                     String siebelObject_child,
    		                                     String siebelField_child,
    		                                     String searchSpec_child,
    		                                     boolean isMVG) throws SiebelException {
		
    	clientBusObject = client.getBusObject(siebelObject_parent);
    	clientBusComp = clientBusObject.getBusComp(siebelObject_parent);
    	
    	clientBusComp.setViewMode(3);
    	clientBusComp.clearToQuery();
    	clientBusComp.activateField(siebelField_parent);
    	clientBusComp.setSearchExpr(searchSpec_parent);
    	clientBusComp.executeQuery2(true,true);
    	
    	if (clientBusComp.firstRecord() && !clientBusComp.nextRecord()) {

    		if (isMVG) {
    			
    			clientAssocBusComp = clientBusComp.getMVGBusComp(MVGBusComp).getAssocBusComp();
    			clientAssocBusComp.setViewMode(3);
    			clientAssocBusComp.clearToQuery();
    			clientAssocBusComp.setSearchExpr(searchSpec_child);
    			clientAssocBusComp.executeQuery2(true,true);
    			
        		if (clientAssocBusComp.firstRecord()) {
        			clientAssocBusComp.associate(isMVG);
        		}
        		
            	clientAssocBusComp.release();
        		
    		} else {
    			
    			clientPickListBusComp = clientBusComp.getPicklistBusComp(siebelObject_child);
        		clientPickListBusComp.setViewMode(3);
        		clientPickListBusComp.clearToQuery();
        		clientPickListBusComp.activateField(siebelField_child);
        		clientPickListBusComp.setSearchExpr(searchSpec_child);
        		clientPickListBusComp.executeQuery2(true,true);
        		
        		if (clientPickListBusComp.firstRecord()) {
        			clientPickListBusComp.pick();
        		}
        		
            	clientPickListBusComp.release();

    		}
    	} else {
    		// implement "no record or more than one record returned!" error    		
    	}
    	
    	return client;
    }
    
    /**
     * Creates a new opportunity
     * 
     * Example: {@code <siebel:create-opportunity opportunityName="MuleSoft_Opportunity"/>}
     * @param opportunityName : new opportunity's name (required)
     * @throws SiebelException
     */
    @Operation
    public void createOpportunity(@Parameter String opportunityName) throws SiebelException {
    	
    	siebelOpportunityClient opportunityClient = new siebelOpportunityClient();
        opportunityClient.createOpportunity(opportunityName);
        opportunityClient = null;
    }
    
    /**
     * Deletes an opportunity
     * 
     * Example: {@code <siebel:delete-opportunity opportunityName="MuleSoft_Opportunity"/>}
     * @param opportunityName : opportunity's name
     * @throws SiebelException
     */
    @Operation
    public void deleteOpportunity(@Parameter String opportunityName) throws SiebelException {
    	
    	siebelOpportunityClient opportunityClient = new siebelOpportunityClient();
        opportunityClient.deleteOpportunity(opportunityName);
        opportunityClient = null;
    }
    
    /**
     * Creates a new account
     * 
     * Example: {@code <siebel:create-account accountName="MuleSoft_Account"/>}
     * @param accountName : new account's name (required)
     * @throws SiebelException
     */
    @Operation
    public void createAccount(@Parameter String accountName) throws SiebelException {
    	
    	siebelAccountClient accountClient = new siebelAccountClient();
    	accountClient.createAccount(accountName);
    	accountClient = null;
    }
    
    /**
     * Deletes an account
     * 
     * Example: {@code <siebel:delete-account accountName="MuleSoft_Account"/>}
     * @param accountName : account's name
     * @throws SiebelException
     */
    @Operation
    public void deleteAccount(@Parameter String accountName) throws SiebelException {
    	
    	siebelAccountClient accountClient = new siebelAccountClient();
    	accountClient.deleteAccount(accountName);
    	accountClient = null;
    }
    
    /**
     * Updates an opportunity's account
     * 
     * Example: {@code <siebel:update-opportunity-account opportunityName="MuleSoft_Opportunity" accountName="MuleSoft_Account" />}
     * @param opportunityName : opportunity's name
     * @param accountName : account's name
     * @throws SiebelException
     */
    @Operation
    public void updateOpportunityAccount(@Parameter String opportunityName, 
    		                  			 @Parameter String accountName) throws SiebelException {
    	
    	siebelOpportunityClient opportunityClient = new siebelOpportunityClient();
    	opportunityClient.updateOpportunityAccount(opportunityName, accountName);
    	opportunityClient = null;
    }
    
    /**
     * Updates an opportunity's contact
     * 
     * Example: {@code <siebel:update-opportunity-contact opportunityName="MuleSoft_Opportunity" contactFirstName="MuleSoft_Contact_Firstname" contactLastName="MuleSoft_Contact_Lastname"/>}
     * @param opportunityName : opportunity's name
     * @param contactName : contact's name
     * @throws SiebelException
     */
    @Operation
    public void updateOpportunityContact(@Parameter String opportunityName, 
    		                  			 @Parameter String contactFirstName,
    		                  			 @Parameter String contactLastName) throws SiebelException {
    	
    	siebelOpportunityClient opportunityClient = new siebelOpportunityClient();
    	opportunityClient.updateOpportunityContact(opportunityName, contactFirstName, contactLastName);
    	opportunityClient = null;
    }
}